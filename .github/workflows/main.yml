name: services_my-application_CI

on:
  push:
    paths:
      - services/my-application/*

defaults:
  run:
    shell: bash

env:
  DOCKER_IMAGE: docker.io/1mill/services-my-application

jobs:
  deploy-to-production:
    container:
      image: 1mill/terraform-sops:alpine-2020-07-05T19-24-29
    defaults:
      run:
        working-directory: /app
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_DEFAULT_REGION: us-east-1
      AWS_PROFILE: ${{ secrets.AWS_PROFILE }}
      TV_VAR_IMAGE: ${{ env.DOCKER_IMAGE }}:${{ needs.package.outputs.version }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    if: endsWith(github.ref, 'master') == true
    needs: [package]
    runs-on: ubuntu-20.04
    steps:
      - run: echo ${TV_VAR_IMAGE}

  package:
    env:
      REGISTROY_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      REGISTRY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
    defaults:
      run:
        working-directory: ./services/my-application
    if: endsWith(github.ref, 'master') == true
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.output_version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v2
      - run: echo "::set-env name=VERSION::$(date +'%Y-%m-%dT%H-%M-%S')"
      - run: echo "::set-output name=VERSION::${{ env.VERSION }}"
        id: output_version
      - run: echo "${REGISTROY_PASSWORD}" | docker login --username ${REGISTRY_USERNAME} --password-stdin
      - run: docker build . --file Dockerfile --tag temp-image
      - run: docker tag temp-image ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}
      - run: docker tag temp-image ${{ env.DOCKER_IMAGE }}:latest
      - run: docker push ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}
      - run: docker push ${{ env.DOCKER_IMAGE }}:latest
